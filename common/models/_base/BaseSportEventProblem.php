<?php

/**
 * This is the model base class for the table "sport_event_problem".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SportEventProblem".
 *
 * Columns in table "sport_event_problem" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $event_id
 * @property string $problem_type
 * @property string $problem_value
 * @property string $description
 * @property integer $is_resolved
 * @property integer $resolver_id
 * @property integer $auto_resolved
 * @property integer $status_before
 * @property integer $is_freeze
 * @property integer $update_at
 * @property integer $create_at
 *
 */
abstract class BaseSportEventProblem extends BaseModel {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'sport_event_problem';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'SportEventProblem|SportEventProblems', $n);
	}

	public static function representingColumn() {
		return 'problem_value';
	}

	public function rules() {
		return [
			['event_id, problem_type, status_before', 'required'],
			['event_id, resolver_id, status_before, update_at, create_at', 'numerical', 'integerOnly'=>true],
			['description', 'safe'],
			['description, is_resolved, resolver_id, auto_resolved, problem_value, is_freeze, update_at, create_at', 'default', 'setOnEmpty' => true, 'value' => null],
			['id, event_id, problem_type, problem_value, description, is_resolved, resolver_id, auto_resolved, status_before, is_freeze, update_at, create_at', 'safe', 'on'=>'search'],
		];
	}

	public function relations() {
		return [
		];
	}

	public function pivotModels() {
		return [
		];
	}

	public function attributeLabels() {
		return [
			'id' => Yii::t('app', 'ID'),
			'event_id' => Yii::t('app', 'Event'),
			'problem_type' => Yii::t('app', 'Problem Type'),
			'problem_value' => Yii::t('app', 'Problem Value'),
			'description' => Yii::t('app', 'Description'),
			'is_resolved' => Yii::t('app', 'Is Resolved'),
			'resolver_id' => Yii::t('app', 'Resolver'),
			'auto_resolved' => Yii::t('app', 'Auto Resolved'),
			'status_before' => Yii::t('app', 'Status Before'),
			'is_freeze' => Yii::t('app', 'Is Freeze'),
			'update_at' => Yii::t('app', 'Update At'),
			'create_at' => Yii::t('app', 'Create At'),
		];
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('event_id', $this->event_id);
		$criteria->compare('problem_type', $this->problem_type);
		$criteria->compare('problem_value', $this->problem_value, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('is_resolved', $this->is_resolved);
		$criteria->compare('resolver_id', $this->resolver_id);
		$criteria->compare('auto_resolved', $this->auto_resolved);
		$criteria->compare('status_before', $this->status_before);
		$criteria->compare('is_freeze', $this->is_freeze);
		$criteria->compare('update_at', $this->update_at);
		$criteria->compare('create_at', $this->create_at);

		return new CActiveDataProvider($this, [
			'criteria' => $criteria,
		]);
	}
}